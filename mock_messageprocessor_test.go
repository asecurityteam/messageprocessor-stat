// Code generated by MockGen. DO NOT EDIT.
// Source: messageprocessor/interface.go

// Package mocks is a generated GoMock package.
package stats

import (
	context "context"
	reflect "reflect"

	messageprocessor "github.com/asecurityteam/messageprocessor"
	kinesis "github.com/aws/aws-sdk-go/service/kinesis"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageProcessor is a mock of MessageProcessor interface.
type MockMessageProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorMockRecorder
}

// MockMessageProcessorMockRecorder is the mock recorder for MockMessageProcessor.
type MockMessageProcessorMockRecorder struct {
	mock *MockMessageProcessor
}

// NewMockMessageProcessor creates a new mock instance.
func NewMockMessageProcessor(ctrl *gomock.Controller) *MockMessageProcessor {
	mock := &MockMessageProcessor{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessor) EXPECT() *MockMessageProcessorMockRecorder {
	return m.recorder
}

// ProcessMessage mocks base method.
func (m *MockMessageProcessor) ProcessMessage(ctx context.Context, record *kinesis.Record) messageprocessor.MessageProcessError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", ctx, record)
	ret0, _ := ret[0].(messageprocessor.MessageProcessError)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockMessageProcessorMockRecorder) ProcessMessage(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockMessageProcessor)(nil).ProcessMessage), ctx, record)
}

// MockMessageProcessError is a mock of MessageProcessError interface.
type MockMessageProcessError struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessErrorMockRecorder
}

// MockMessageProcessErrorMockRecorder is the mock recorder for MockMessageProcessError.
type MockMessageProcessErrorMockRecorder struct {
	mock *MockMessageProcessError
}

// NewMockMessageProcessError creates a new mock instance.
func NewMockMessageProcessError(ctrl *gomock.Controller) *MockMessageProcessError {
	mock := &MockMessageProcessError{ctrl: ctrl}
	mock.recorder = &MockMessageProcessErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessError) EXPECT() *MockMessageProcessErrorMockRecorder {
	return m.recorder
}

// IsRetryable mocks base method.
func (m *MockMessageProcessError) IsRetryable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryable indicates an expected call of IsRetryable.
func (mr *MockMessageProcessErrorMockRecorder) IsRetryable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryable", reflect.TypeOf((*MockMessageProcessError)(nil).IsRetryable))
}

// Error mocks base method.
func (m *MockMessageProcessError) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockMessageProcessErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockMessageProcessError)(nil).Error))
}

// RetryAfter mocks base method.
func (m *MockMessageProcessError) RetryAfter() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryAfter")
	ret0, _ := ret[0].(int)
	return ret0
}

// RetryAfter indicates an expected call of RetryAfter.
func (mr *MockMessageProcessErrorMockRecorder) RetryAfter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryAfter", reflect.TypeOf((*MockMessageProcessError)(nil).RetryAfter))
}
